terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

provider "aws" {
  region = "ap-southeast-1"
  profile = "prasanna"
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}
resource "tls_private_key" "this" {
  algorithm = "RSA"
  rsa_bits  = 4096
}
resource "aws_key_pair" "this" {
  key_name   = "terraform-key"
  public_key = tls_private_key.this.public_key_openssh
}

resource "aws_instance" "terraform-instance" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = "t2.micro"
  vpc_security_group_ids = [aws_security_group.terraform-sg1.id]
  key_name               = aws_key_pair.this.key_name
  user_data              = local.user_data
  
  tags = {
    Name = "terraform-instance"
  }
}

#iam role
resource "aws_iam_instance_profile" "ec2-role" {
  name = "ec2-role"
  role = "${aws_iam_role.s3-full-access.name}"
}

resource "aws_iam_role" "s3-full-access" {
  name                = "s3-full-access"
  managed_policy_arns = [aws_iam_policy.ec2-role-policy.arn]

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })
}

  
resource "aws_iam_policy" "ec2-role-policy" {
  name = "s3-full_access"

 policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
       "Action": [
                "s3:*",
                "s3-object-lambda:*"
            ],
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}



resource "aws_security_group" "terraform-sg1" {
  name        = "terraform-sg1"
  description = "Allow TLS inbound traffic"

  ingress {
    description      = "TLS from VPC"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "TLS from VPC"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
   cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "TLS from VPC"
    from_port        = 8080
    to_port          = 8080
    protocol         = "tcp"
   cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "terraform-sg1"
  }
}

locals {
  user_data = <<EOF
  git credentialsId: 'github', url: 'https://github.com/prasanna3105/terraform-jenkins.git'
  sh '''
  sudo apt update -y
  wget -O- https://apt.releases.hashicorp.com/gpg | \
    gpg --dearmor | \
    sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
  echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
    https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
    sudo tee /etc/apt/sources.list.d/hashicorp.list
  sudo apt update -y
  sudo apt install terraform -y
  terraform init
  terraform apply -auto-approve

  EOF
}

